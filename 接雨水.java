// 接雨水
// 经典题型，可以用 dp、单调栈、双指针，三种方法解题
// 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水
// height = [0,1,0,2,1,0,1,3,2,1,2,1] => 6
// 
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
// 
class Solution1 {
    // 单调栈解法
    public int trap(int[] height) {
        if(height.length == 1) {
            return 0;
        }
        // 单调栈存储的是下标，满足从栈底到栈顶的下标对应的数组 height 中的元素递减
        Stack<Integer> st = new Stack<>();
        int res = 0;
        for(int i = 0; i < height.length; i++) {
            while(!st.isEmpty() && height[st.peek()] < height[i]) {
                int idx1 = st.pop(); // 当前比较低的柱子的 index，查看该位置可以接多少雨水
                if(st.isEmpty()) { // 如果该柱子左边没有其他柱子，则不可能接雨水
                    break;
                }
                int idx2 = st.peek(); // 位于 idx1 的低柱子左边的柱子
                // idx1 的柱子和它左右侧较低的柱子之间的差，即能接雨水最大的高度
                int dh = Math.min(height[idx2], height[i]) - height[idx1];
                int dw = i - idx2 - 1; // idx1 左右侧的柱子之间的宽度
                res += dh * dw;
            }
            st.push(i);
        }
        return res;
    }
}

class Solution2 {
    // dp 解法
    public int trap(int[] height) {
        int n = height.length;
        if(n == 1) {
            return 0;
        }
        // 非标准 dp
        // 向右扫描，扫描当前位置左边 (包括自身) 最高的柱子高度
        int[] leftMax = new int[n];
        leftMax[0] = height[0];
        for(int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }
        // 向左扫描，扫描当前位置右边 (包括自身) 最高的柱子高度
        int[] rightMax = new int[n];
        rightMax[n - 1] = height[n - 1];
        for(int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }
        // 对于下标 i，下雨后水能到达的最大高度等于下标 i 两边的最大高度的最小值
        // 下标 i 处能接的雨水量等于下标 i 处的水能到达的最大高度减去 height[i]
        int ans = 0;
        for(int i = 0; i < n; i++) {
            ans += Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        return ans;
    }
}

class Solution3 {
    // 双指针解法
    public int trap(int[] height) {
        int ans = 0;
        int left = 0, right = height.length - 1;
        int leftMax = 0, rightMax = 0;
        while(left < right) {
            leftMax = Math.max(leftMax, height[left]);
            rightMax = Math.max(rightMax, height[right]);
            if(leftMax < rightMax) {
                ans += leftMax - height[left];
                left += 1;
            } else {
                ans += rightMax - height[right];
                right -= 1;
            }
        }
        return ans;
    }
}

// 双指针解法核心思想: 比较当前遍历到的左右侧最高的柱子高度，且只关注当前位置的装水量
// 如果右侧的最高值更大，说明此时 left 所在的位置右侧有柱子兜住，可以装水
// 此时有两种情况: 1、当前 left 位置就是左侧最高的柱子，那么无法装水
// 2、当前 left 位置左侧有更高的柱子，则可以装水，只考虑 left 位置的装水量，不需要考虑其他位置
// (原因: 中间夹的柱子有三种情况: 1、和右侧当前最高的柱子相等，无需讨论
//  2、比右侧当前最高的柱子高，但此时取水计算的是左侧最高柱子的高度，因此不受影响
//  3、比右侧当前最高的柱子低，装水的容量由两侧最高的柱子决定，因此也不影响)
// 继续将 left 指针右移，继续寻找当前右侧最高柱子可兜住的柱子
// 如果左侧的最高值更大，说明此时 right 所在的位置左侧有柱子兜住，可以装水，具体情况和前面类似
// -----------------------------------------------
// left = 0, right = -1, leftMax = 0, rightMax = 1
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//   x                                                                 x
// 此时，忽略中间的柱子，可以发现 rightMax 较高，因此计算 left 的装水量
// 但 left 柱子等于左侧最高柱子高度，因此无法装水
// 此时，将 left 指针右移，寻找可以装水的柱子
//        _____
// _____ |     |
//   x      x
// -----------------------------------------------
// left = 1, right = -1, leftMax = 1, rightMax = 1
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//         x                                                           x
// 此时，两个柱子相等，rightMax 不再可以兜住左侧柱子，因此将 right 指针左移
//  _____   _____
// |     | |     |
//    x       x
// -----------------------------------------------
// left = 1, right = -2, leftMax = 1, rightMax = 2
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//         x                                                     x
// 此时，忽略中间的柱子，可以发现 rightMax 较高，但 left 柱子等于左侧最高柱子高度，无法装水
// 因此，将 left 指针右移，寻找可以装水的柱子
//          _____
//  _____  |     |
// |     | |     |
//    x       x
// -----------------------------------------------
// left = 2, right = -2, leftMax = 1, rightMax = 2
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//               x                                               x
//              _____
//  _____      |     |
// |     |_____|     |
//          x     x
// 此时，rightMax 较高，left 柱子也低于左侧最高柱子高度，因此可以装水
// 装水的高度取决于两侧高柱子的最低高度，只计算当前位置装水量，继续右移 left 指针
// -----------------------------------------------
// left = 3, right = -2, leftMax = 2, rightMax = 2
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                     x                                         x
// 此时，leftMax 和 rightMax 相等，right 柱子为新的右侧最大值，无法装水。右侧无法兜住左侧，因此左移 right 指针
//  _____   _____
// |     | |     |
// |     | |     |
//    x       x
// -----------------------------------------------
// left = 3, right = -3, leftMax = 2, rightMax = 2
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                     x                                   x
// 此时，leftMax 依旧和 rightMax 相等，计算 right 柱子的装水量
// 右侧无法兜住左侧，因此左移 right 指针
// -----------------------------------------------
// left = 3, right = -4, leftMax = 2, rightMax = 2
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                     x                             x
// 此时，leftMax 依旧和 rightMax 相等，计算 right 柱子的装水量
// right 柱子 = 右侧最大值，无法装水
// -----------------------------------------------
// left = 3, right = -5, leftMax = 2, rightMax = 3
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                     x                       x
// 此时，rightMax 较大，left 柱子 = 左侧最大值，无法装水。右移 left 指针
// -----------------------------------------------
// left = 4, right = -5, leftMax = 2, rightMax = 3
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                           x                 x
// 此时，rightMax 较大，计算 left 柱子的装水量。右移 left 指针
// -----------------------------------------------
// left = 5, right = -5, leftMax = 2, rightMax = 3
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                                 x           x
// 此时， rightMax 较大，计算 left 柱子的装水量。右移 left 指针
// -----------------------------------------------
// left = 6, right = -5, leftMax = 2, rightMax = 3
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                                       x     x
// 此时，rightMax 较大，计算 left 柱子的装水量。右移 left 指针
// -----------------------------------------------
// left = 7, right = -5
//                                           _____
//                   _____                  |     |_____       _____
//       _____      |     |_____       _____|     |     |_____|     |_____
// _____|     |_____|     |     |_____|     |     |     |     |     |     |
//                                             x
// 此时，左右指针重叠，跳出循环，结束计算